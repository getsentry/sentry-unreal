name: package-plugin-workflow

on: [push]

jobs:
  build:
    name: Build - ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Sentry package for release
        shell: pwsh
        run: ./scripts/packaging/pack.ps1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.sha }}
          if-no-files-found: error
          # Adding the native libraries so the symbol collector craft target can find/upload them
          path: |
            package-release.zip
          # TODO modules/sentry-java/sentry-android-ndk/build/intermediates/merged_native_libs/release/out/lib/*

  package-validation:
    needs: [build]
    name: UPM Package validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download UPM package
        uses: actions/download-artifact@v2
        with:
          # Artifact name is the commit sha. Which is what craft uses to find the relevant artifact.
          name: ${{ github.sha }}

      # If this step fails, you can accept the new file content by
      # running the following script locally with 'accept' as an argument
      # and committing the new snapshot file to your branch. i.e:
      # pwsh ./scripts/test-contents.ps1 accept
      - name: Verify package content against snapshot
        shell: pwsh
        run: ./scripts/packaging/test-contents.ps1

  # TODO: describe what does this accomplish?
  #       It's not doing anything with the package at the moment.
  #       Is it a test? Or should we actually use the output of the final command for publishing?
  package-plugin-job:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        unreal: ['4.27', '5.0.2']

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Free disk space
        if: ${{ steps.exists.outputs.value == 0 }}
        run: |
          # time df -h
          sudo time swapoff -a
          sudo time rm -f /swapfile
          sudo time rm -rf /usr/local/lib/android
          sudo time rm -rf /usr/share/dotnet
          sudo time rm -rf /usr/share/swift
          sudo time rm -rf /usr/local/.ghcup
          sudo time rm -rf /usr/local/lib/node_modules
          sudo time rm -rf /usr/lib/google-cloud-sdk
          sudo time rm -rf /opt/pipx
          sudo time rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo time apt-get clean
          sudo time rm -rf /var/lib/apt/lists/*
          # time docker rmi $(docker image ls -aq)
          # time du --max-depth=3 --threshold=100M -h /usr /opt /var 2>/dev/null | sort -hr
          df -h

      - name: Run Docker container
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker run -td --name unreal --user root \
            -v ${{ github.workspace }}/plugin-dev:/sentry-unreal \
            --workdir /sentry-unreal \
            ghcr.io/epicgames/unreal-engine:dev-slim-${{ matrix.unreal }}

      - name: Installing Linux Dependencies
        run: |
          docker exec unreal sudo apt-get update
          docker exec unreal pip3 install --upgrade pip

      - name: Installing UE CLI
        run:
          docker exec unreal pip3 install ue4cli

      - name: Configuring UE CLI
        run:
          docker exec unreal ue4 setroot /home/ue4/UnrealEngine

      - name: Package plugin
        run: docker exec unreal ue4 package
